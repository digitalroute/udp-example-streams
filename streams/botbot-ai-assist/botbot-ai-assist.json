{
  "name": "Botbot AI assist",
  "nodes": [
    {
      "id": "44c146c0-b07a-11ee-b6af-9f45c2c2a7a8",
      "name": "Validate",
      "type": "transforms/validate",
      "params": {
        "schema": {
          "properties": {
            "region": {
              "enum": [
                "APAC",
                "EMEA",
                "AMER"
              ],
              "description": "Region validation"
            }
          },
          "required": [
            "region"
          ]
        },
        "suspenseManagement": {
          "enabled": true,
          "resetOnValidEvent": true,
          "eventThreshold": 10000,
          "onThresholdExceeded": "ABORT",
          "abortOnDisabled": false
        }
      },
      "partitionKey": null,
      "schemaVersion": 1,
      "x": 800,
      "y": 200
    },
    {
      "id": "13de6dd0-ea0e-11ee-b028-57e26d98119b",
      "name": "Script",
      "type": "transforms/script",
      "params": {
        "transform": "const orgs = {\n  'Cloud AI': {\n    emails: [\n      'noah@cloudai.foo', \n      'swan@cloudai.foo', \n      'elle@cloudai.foo', \n      'gia@cloudai.foo',\n      'tara@cloudai.foo',\n    ],\n  },\n  'Play-to-Earn': {\n    emails: [\n      'freppa@playtoearn.foo',\n      'chris@playtoearn.foo',\n      'lia@playtoearn.foo',\n      'kim@playtoearn.foo',\n    ]\n  },'FinTech Lords': {\n    emails: [\n      'johan@finlords.foo',\n      'cole@finlords.foo',\n      'jaira@finlords.foo',\n      'carboard@finlords.foo',\n    ]\n  },'Machine Emotions': {\n    emails: [\n      'hope@machineemotions.foo',\n      'joy@machineemotions.foo',\n      'sadie@machineemotions.foo',\n      'mercy@machineemotions.foo',\n    ]\n  },'Android Sheep': {\n    emails: [\n      'baah@androidsheep.foo',\n      'bee@androidsheep.foo',\n      'buuurh@androidsheep.foo',\n      'bro@androidsheep.foo',\n    ]\n  },'Metaverse Mages': {\n    emails: [\n      'gibson@metaversemages.foo',\n      'stevenson@metaversemages.foo',\n      'neo@metaversemages.foo',\n      'akira@metaversemages.foo',\n    ]\n  }\n} \nconst orgKeys = Object.keys(orgs);\nconst regions = ['EMEA', 'APAC', 'AMER', 'unknown'];\n\nconst serviceAgents = ['Apex', 'Carl', 'Tia'];\n\n\nlet duplicate;\nfor(let i = 0; i < 100; i++) {\n  if(duplicate) {\n    await push(duplicate);\n    duplicate = undefined;\n    continue;\n  }\n\n  const orgName = orgKeys[Math.floor(Math.random() * orgKeys.length)];\n  const status = getStatus();\n  const created = new Date(Date.now() - Math.floor(Math.random() * 1000 * 60 * 5));\n  const apiCalls = 5 + Math.floor(Math.random() * 30 + Math.random() * 10 + Math.random());\n  const apiCallsType = Math.random() * 100 < 70 ? \"L1\" : \"L2\";\n  const data = {\n    userId: orgName,\n    customerEmail: orgs[orgName].emails[Math.floor(Math.random() * orgs[orgName].emails.length)],\n    sessionId: createRequestId(),\n    caseNumber: Math.floor(Math.random() * 9000000) + 1000000,\n    status: status,\n    apiCalls: apiCalls,\n    apiCallsType: apiCallsType,\n    region: regions[Math.floor(Math.random() * regions.length)],\n    sessionEndTime: created,\n  };\n  \n\n  /*\n  {\n    \"userId\": \"Play-to-Earn\",\n    \"customerEmail\": \"rope@shotmail.com\",\n    \"sessionId\": \"QTCFN7266\", // This is unique for every record and can used for de-duplication\n    \"caseNumber\": 5563879,    // This is the customer case number (can span multiple sessions), we don’t really use this\n    \"status\": \"Open\",   // Open, Resolved, HandedOverToOperator, Failed\n\n    “apiCalls“: 12 // Integer, >= 0\n\n    “apiCallsType”: “L1” // L1, L2\n\n    \"region\": \"EMEA\",\n    \"sessionEndTime\": \"2024-05-27T12:59:57.960Z\",\n}\n  */\n  \n\n  const shouldDuplicate = Math.random() * 100 < 10;\n  if(shouldDuplicate){\n    duplicate = data\n  }\n\n  await push(data);\n}\n\nfunction getStatus() {\n  const roll = Math.random() * 100;\n  if(roll < 50) {\n    return 'Resolved';\n  }\n\n  if(roll < 80) {\n    return 'Open';\n  }\n\n  if (roll < 90) {\n    return \"Failed\";\n  }\n\n  return 'HandedOverToOperator';\n}\n\nfunction createRequestId() {\n  let idPrefix = '';\n  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const charactersLength = characters.length;\n  for (let i = 0; i < 5; i++) {\n    idPrefix += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n\n  // Generate a random number between 100 and 999\n  const randomNum = Math.floor(Math.random() * 9000) + 1000;\n\n  // Concatenate static characters with the random number\n  const shortId = `${idPrefix}${randomNum}`;\n\n  return shortId;\n}"
      },
      "partitionKey": null,
      "schemaVersion": 1,
      "x": 500,
      "y": 200
    },
    {
      "id": "6363e5b0-ea18-11ee-b028-57e26d98119b",
      "name": "Meter",
      "type": "transforms/meter",
      "params": {
        "meterKey": "17f05f60-5bd7-11ef-bc19-99d6414306ee",
        "guidingRules": [
          {
            "customName": "L1 API Requests",
            "conditions": [
              {
                "customName": "",
                "field": "apiCallsType",
                "value": "L1"
              }
            ],
            "conditionRelation": "and",
            "ignoreCondition": false,
            "matchCategory": "L1_API_Requests",
            "groupBy": [
              {
                "fields": [
                  "region"
                ]
              },
              {
                "fields": [
                  "status"
                ]
              }
            ],
            "otherOperations": [
              {
                "field": "caseNumber",
                "operation": "carry-last"
              },
              {
                "field": "customerEmail",
                "operation": "carry-last"
              },
              {
                "field": "status",
                "operation": "carry-last"
              },
              {
                "field": "sessionId",
                "operation": "carry-last"
              }
            ]
          },
          {
            "customName": "L2 API Requests",
            "conditions": [
              {
                "customName": "",
                "field": "apiCallsType",
                "value": "L2"
              }
            ],
            "conditionRelation": "and",
            "ignoreCondition": false,
            "matchCategory": "L2_API_Requests",
            "groupBy": [
              {
                "fields": [
                  "region"
                ]
              },
              {
                "fields": [
                  "status"
                ]
              }
            ],
            "otherOperations": [
              {
                "field": "status",
                "operation": "carry-last"
              },
              {
                "field": "caseNumber",
                "operation": "carry-last"
              },
              {
                "field": "customerEmail",
                "operation": "carry-last"
              },
              {
                "field": "sessionId",
                "operation": "carry-last"
              }
            ]
          }
        ],
        "suspenseManagement": {
          "enabled": true,
          "abortOnDisabled": false,
          "resetOnValidEvent": true,
          "eventThreshold": 10000,
          "onThresholdExceeded": "ABORT"
        },
        "flushType": "TIMEOUT"
      },
      "partitionKey": null,
      "schemaVersion": 1,
      "x": 1100,
      "y": 200
    },
    {
      "id": "50920421-eab9-11ee-be5c-ed7b10940926",
      "name": "Deduplicate",
      "type": "transforms/deduplicate",
      "params": {
        "multiOutput": {
          "fixed": {
            "unique": {
              "id": "50920420-eab9-11ee-be5c-ed7b10940926"
            }
          }
        },
        "key": "${payload.sessionId}"
      },
      "partitionKey": null,
      "schemaVersion": 4,
      "x": 650,
      "y": 200
    },
    {
      "id": "2bc05970-138c-11ef-aa40-3bc36eb7b565",
      "name": "Count",
      "type": "readers/counter",
      "params": {
        "max": 1
      },
      "partitionKey": null,
      "schemaVersion": 2,
      "x": 350,
      "y": 200
    },
    {
      "id": "907b08f0-1392-11ef-aa40-3bc36eb7b565",
      "name": "Field organizer",
      "type": "transforms/map",
      "params": {
        "mappings": [
          {
            "userId": "userId"
          },
          {
            "customerEmail": "customerEmail"
          },
          {
            "sessionId": "sessionId"
          },
          {
            "caseNumber": "caseNumber"
          },
          {
            "status": "status"
          },
          {
            "region": "region"
          },
          {
            "apiCallsType": "apiCallsType"
          },
          {
            "value": "apiCalls"
          }
        ]
      },
      "partitionKey": null,
      "schemaVersion": 2,
      "x": 950,
      "y": 200
    },
    {
      "id": "af86ba50-1392-11ef-aa40-3bc36eb7b565",
      "name": "Log",
      "type": "writers/log",
      "params": {},
      "partitionKey": null,
      "schemaVersion": 1,
      "x": 1250,
      "y": 200
    }
  ],
  "edges": [
    {
      "id": "524fe0c0-eab9-11ee-be5c-ed7b10940926",
      "from": "13de6dd0-ea0e-11ee-b028-57e26d98119b",
      "to": "50920421-eab9-11ee-be5c-ed7b10940926",
      "config": {}
    },
    {
      "id": "5370e120-eab9-11ee-be5c-ed7b10940926",
      "from": "50920421-eab9-11ee-be5c-ed7b10940926",
      "output": "50920420-eab9-11ee-be5c-ed7b10940926",
      "to": "44c146c0-b07a-11ee-b6af-9f45c2c2a7a8",
      "config": {}
    },
    {
      "id": "2e2ec160-138c-11ef-aa40-3bc36eb7b565",
      "from": "2bc05970-138c-11ef-aa40-3bc36eb7b565",
      "to": "13de6dd0-ea0e-11ee-b028-57e26d98119b",
      "config": {}
    },
    {
      "id": "92af2700-1392-11ef-aa40-3bc36eb7b565",
      "from": "44c146c0-b07a-11ee-b6af-9f45c2c2a7a8",
      "to": "907b08f0-1392-11ef-aa40-3bc36eb7b565",
      "config": {}
    },
    {
      "id": "95f159b0-1392-11ef-aa40-3bc36eb7b565",
      "from": "907b08f0-1392-11ef-aa40-3bc36eb7b565",
      "to": "6363e5b0-ea18-11ee-b028-57e26d98119b",
      "config": {}
    },
    {
      "id": "b1603540-1392-11ef-aa40-3bc36eb7b565",
      "from": "6363e5b0-ea18-11ee-b028-57e26d98119b",
      "to": "af86ba50-1392-11ef-aa40-3bc36eb7b565",
      "config": {}
    }
  ]
}